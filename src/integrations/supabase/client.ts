// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from './types'; // Importamos los tipos generados

// En Vite, debemos usar import.meta.env en lugar de process.env
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://mmgnrldpwnwqkgavsoih.supabase.co';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1tZ25ybGRwd253cWtnYXZzb2loIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxNDA0MDEsImV4cCI6MjA1ODcxNjQwMX0.0YwCy8hctxYIKz9xC4rb7PXNSYzlMQOQnnZcVDEbYeU';

// Crear el cliente principal (con clave anon)
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: fetch.bind(globalThis),
    headers: {
      'x-application-name': 'fotoreflex',
    },
  },
  realtime: {
    timeout: 30000,
  },
  db: {
    schema: 'public',
  },
});

// Intentar obtener el token de autenticación actual
export const getCurrentAuthToken = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return session?.access_token || null;
};

// Métodos helpers para facilitar operaciones comunes y manejar problemas de RLS

// Añadir un tipo más específico para la respuesta de las funciones helper
type UpdateResult = {
  success: boolean;
  method: string;
  error?: any;
  data?: any;
};

/**
 * Esta función ayuda a actualizar registros en photo_services usando múltiples
 * métodos para evitar problemas de RLS y otros errores comunes.
 */
export async function updatePhotoService(id: string, data: any): Promise<UpdateResult> {
  console.log(`Intentando actualizar servicio ${id} usando métodos alternativos:`, data);
  
  // Método 1: Actualización directa estándar
  try {
    console.log('Método 1: Actualización directa estándar');
    const { error } = await supabase
      .from('photo_services')
      .update(data)
      .eq('id', id);
      
    if (!error) {
      return { success: true, method: 'direct_update' };
    }
    
    console.log('Método 1 falló:', error);
  } catch (err) {
    console.error('Error en método 1:', err);
  }
  
  // Método 2: Usar upsert
  try {
    console.log('Método 2: Upsert');
    const { error } = await supabase
      .from('photo_services')
      .upsert({ id, ...data });
      
    if (!error) {
      return { success: true, method: 'upsert' };
    }
    
    console.log('Método 2 falló:', error);
  } catch (err) {
    console.error('Error en método 2:', err);
  }
  
  // Método 3: Actualizar solo un campo a la vez
  try {
    console.log('Método 3: Actualizar campo por campo');
    let allFieldsSuccess = true;
    let fieldErrors = [];
    
    for (const [key, value] of Object.entries(data)) {
      const updateObject = { [key]: value };
      console.log(`Actualizando campo: ${key}`, updateObject);
      
      const { error } = await supabase
        .from('photo_services')
        .update(updateObject)
        .eq('id', id);
        
      if (error) {
        allFieldsSuccess = false;
        fieldErrors.push({ field: key, error });
        console.log(`Error actualizando campo ${key}:`, error);
      }
    }
    
    if (allFieldsSuccess) {
      return { success: true, method: 'field_by_field' };
    }
    
    console.log('Método 3 falló con errores en algunos campos:', fieldErrors);
  } catch (err) {
    console.error('Error en método 3:', err);
  }
  
  // Método 4: RPC si existe función personalizada
  try {
    console.log('Método 4: Llamada a función RPC');
    const { error } = await supabase.rpc('update_photo_service', {
      p_id: id,
      p_description: data.description,
      p_base_price: data.base_price,
      p_type: data.type,
      p_active: data.active
    });
    
    if (!error) {
      return { success: true, method: 'rpc_function' };
    }
    
    console.log('Método 4 falló:', error);
  } catch (err) {
    console.error('Error en método 4:', err);
  }
  
  // Si llegamos aquí, todos los métodos han fallado
  console.log('Todos los métodos de actualización fallaron para el servicio:', id);
  return { 
    success: false, 
    method: 'all_failed',
    error: 'Todos los métodos de actualización fallaron' 
  };
}